{"version":3,"sources":["a1-root/v3-Mark/Mark.module.css","a1-root/Redusers/mainReduser.ts","a1-root/Redusers/tagsReduser.ts","a1-root/v2-inputMarks/InputMarks.tsx","a1-root/v3-Mark/Mark.tsx","a1-root/v1-Main/Main.tsx","a1-root/App/App.tsx","reportWebVitals.ts","a1-root/App/store.ts","index.tsx"],"names":["module","exports","initialState","marks","actionsMain","name","tag","type","id","nameMark","alltags","actionsTags","getTag","title","valueInput","split","map","i","index","push","replace","InputMarks","React","memo","useState","setTitle","dispatch","useDispatch","addItem","trimmedTitle","trim","Paper","style","width","height","backgroundColor","marginBottom","Grid","container","alignItems","justifyContent","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","variant","helperText","Button","onClick","size","color","Mark","props","titleKey","setTitleKey","changeInput","setChangeInput","onChangeInput","className","containerCustom","margin","padding","position","customInput","onBlur","onKeyPressCapture","Typography","component","customDiv","nanoid","getColorTitle","direction","item","onDoubleClick","IconButton","Clear","Chip","Main","useSelector","state","main","tags","currentmarks","setCurrentmarks","newTag","setNewTag","valueNewTag","setValueNewTag","useEffect","getState","a","JSON","stringify","addNewTag","Container","length","t","background","newMarks","filter","m","includes","sortMarks","deleteTag","startIcon","deleteTagWithMark","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","it","arr","indexOf","current","newArr","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ab9f176b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"customInput\":\"Mark_customInput__ZSVil\",\"customDiv\":\"Mark_customDiv__2OBvg\",\"containerCustom\":\"Mark_containerCustom__3vk7s\"};","import {Dispatch} from \"react\";\r\nimport {nanoid} from 'nanoid'\r\nimport {AppRootStateType} from \"../App/store\";\r\n\r\nconst initialState = {\r\n    marks: []\r\n};\r\n\r\nexport const mainReduser =\r\n    (state: InitialMainStateType = initialState, action: actionsMainType): InitialMainStateType => {\r\n        switch (action.type) {\r\n\r\n            case \"MAIN/CREATE-MARKS\":\r\n                return {\r\n                    ...state,\r\n                    marks: [\r\n                        ...state.marks,\r\n                        {\r\n                            id: nanoid(),\r\n                            name: action.name,\r\n                            tag: action.tag.filter((it, index, arr) => index === arr.indexOf(it))\r\n                        }\r\n                    ]\r\n                };\r\n            case \"MAIN/RENAME-MARK\":\r\n                return {\r\n                    ...state,\r\n                    marks:\r\n                        state.marks.map(m => m.id === action.id ? {\r\n                            ...m,\r\n                            name: action.nameMark,\r\n                            tag: action.tag.filter((it, index, arr) => index === arr.indexOf(it))\r\n                        } : m)\r\n                };\r\n            case \"MAIN/DELETE-MARK\":\r\n                return {\r\n                    ...state,\r\n                    marks: state.marks.filter(m => m.id !== action.id)\r\n                };\r\n            case \"MAIN/DELETE-MARK-TAG\":\r\n                let current: MarksType[] = []\r\n                state.marks.map((i, index) => {\r\n                    if (i.tag.includes(action.tag) && i.tag.length === 1) {\r\n                        current.push(state.marks[index])\r\n                    }\r\n                })\r\n                if (current) {\r\n                    return {\r\n                        ...state,\r\n                        marks: state.marks.filter(m => m !== current[current.indexOf(m)])\r\n                    }\r\n                }\r\n                return state;\r\n\r\n\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\n// actions\r\nexport const actionsMain = {\r\n\r\n    createMarks: (name: string, tag: Array<string>,) => ({\r\n        type: \"MAIN/CREATE-MARKS\",\r\n        name, tag\r\n    } as const),\r\n    deleteMark: (id: string) => ({\r\n        type: \"MAIN/DELETE-MARK\",\r\n        id\r\n    } as const),\r\n    deleteMarkTag: (tag: string) => ({\r\n        type: \"MAIN/DELETE-MARK-TAG\",\r\n        tag\r\n    } as const),\r\n    updateMark: (nameMark: string, id: string, tag: Array<string>) => ({\r\n        type: \"MAIN/RENAME-MARK\",\r\n        nameMark, id, tag\r\n    } as const)\r\n};\r\n\r\n// thunk\r\nexport const initializeApp = () => async (dispatch: Dispatch<any>, getState: () => AppRootStateType) => {\r\n    let data = JSON.stringify(getState())\r\n};\r\n\r\n\r\n// types\r\nexport type InitialMainStateType = {\r\n    marks: Array<MarksType>\r\n};\r\nexport type MarksType = {\r\n    id: string,\r\n    name: string,\r\n    tag: Array<string>\r\n};\r\nexport type actionsMainType = InferActionType<typeof actionsMain>\r\n\r\nexport type InferActionType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;\r\n","const initialState = {\r\n    alltags: []\r\n};\r\n\r\nexport const tagsReduser =\r\n    (state: InitialTagsStateType = initialState, action: actionsTagsType): InitialTagsStateType => {\r\n        switch (action.type) {\r\n            case \"TAGS/ADD-TAG\":\r\n                let newArr = [...state.alltags, ...action.tag].filter((it, index, arr) => index === arr.indexOf(it))\r\n                return {\r\n                    ...state,\r\n                    alltags: [...newArr]\r\n                };\r\n            case \"TAGS/DELETE-TAG\":\r\n                return {\r\n                    ...state,\r\n                    alltags: state.alltags.filter(i => i !== action.tag)\r\n                }\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\n// actions\r\nexport const actionsTags = {\r\n\r\n    addTags: (tag: Array<string>) => ({\r\n        type: \"TAGS/ADD-TAG\",\r\n        tag\r\n    } as const),\r\n    deleteTag: (tag: string) => ({\r\n        type: \"TAGS/DELETE-TAG\",\r\n        tag\r\n    } as const),\r\n};\r\n\r\n\r\n// types\r\nexport type InitialTagsStateType = {\r\n    alltags: Array<string>\r\n}\r\nexport type actionsTagsType = InferActionType<typeof actionsTags>\r\n\r\nexport type InferActionType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, Grid, Paper, TextField} from \"@material-ui/core\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {actionsMain} from \"../Redusers/mainReduser\";\r\nimport {actionsTags} from \"../Redusers/tagsReduser\";\r\n\r\n\r\nexport type addItemFormType = {\r\n    addItem: (title : string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const getTag = (title: string)=>{\r\n\r\n    let valueInput = title.split(/(#[a-z\\d-]+)/ig)\r\n\r\n    let tag: string[] = []\r\n    valueInput.map((i, index)=>{\r\n        if(index % 2 !== 0){\r\n            tag.push(i.replace('#',''))\r\n        }\r\n    })\r\n    return tag\r\n}\r\nexport const InputMarks = React.memo(function (){\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const dispatch = useDispatch()\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addItem = () => {\r\n\r\n        const trimmedTitle = title.trim()\r\n        let tag = getTag(trimmedTitle)\r\n        if (trimmedTitle) {\r\n            dispatch(actionsMain.createMarks(trimmedTitle, tag))\r\n            dispatch(actionsTags.addTags(tag))\r\n        }\r\n\r\n        setTitle('')\r\n    }\r\n\r\n    const onKeyPressAddItem = (e : KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.key === 'Enter'){\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Paper\r\n            style={{\r\n                width: 500,\r\n                height: 100,\r\n                backgroundColor: \"lightgrey\",\r\n                marginBottom: 20\r\n            }}\r\n        >\r\n            <Grid\r\n                container\r\n                alignItems='center'\r\n                justifyContent='space-around'\r\n                style={{ width: 500, height: 100, backgroundColor: 'darkkhaki'}}\r\n            >\r\n                <TextField\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    onKeyPress={onKeyPressAddItem}\r\n                    label=\"Enter your mark\"\r\n                    variant=\"outlined\"\r\n                    style={{width: 350}}\r\n                    helperText=\"To add press the button or key 'Enter'\"\r\n                />\r\n                <Button onClick = {addItem}\r\n                        variant=\"contained\"\r\n                        size=\"medium\"\r\n                        color='primary'\r\n                >\r\n                    Add\r\n                </Button>\r\n            </Grid>\r\n        </Paper>\r\n\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Chip,\r\n    Grid,\r\n    IconButton,\r\n    Paper,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Clear} from \"@material-ui/icons\";\r\nimport {actionsMain} from \"../Redusers/mainReduser\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {actionsTags} from \"../Redusers/tagsReduser\";\r\nimport {getTag} from \"../v2-inputMarks/InputMarks\";\r\nimport style from \"./Mark.module.css\"\r\nimport {nanoid} from \"nanoid\";\r\n\r\ntype MarkType = {\r\n    name: string\r\n    tag: Array<string>\r\n    id: string\r\n}\r\n\r\nexport const Mark = React.memo(function (props: MarkType) {\r\n\r\n    const dispatch = useDispatch()\r\n    const [title, setTitle] = useState<string>(props.name)\r\n    const [titleKey, setTitleKey] = useState<string>(props.name)\r\n    const [changeInput, setChangeInput] = useState<boolean>(false)\r\n\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleKey(e.currentTarget.value)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onChangeInput()\r\n        }\r\n    }\r\n\r\n    const getColorTitle = (title: string) => {\r\n\r\n        let valueInput = title.split(/(#[a-z\\d-]+)/ig)\r\n\r\n        return valueInput.map((i, index) => {\r\n            if (index % 2 === 0) {\r\n                return <span key={nanoid()} style={{color: 'black'}}>{i}</span>\r\n            } else {\r\n                return <span key={nanoid()} style={{color: 'red'}}>{i}</span>\r\n            }\r\n        })\r\n    }\r\n    const onChangeSpan = () => setChangeInput(true);\r\n    const onChangeInput = () => {\r\n        setChangeInput(false)\r\n\r\n        const trimmedTitle = title.trim()\r\n        let tag = getTag(trimmedTitle)\r\n        if (trimmedTitle) {\r\n            dispatch(actionsMain.updateMark(trimmedTitle, props.id, tag))\r\n            dispatch(actionsTags.addTags(tag))\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Paper\r\n            className={style.containerCustom}\r\n            style={{\r\n                backgroundColor: 'darkkhaki',\r\n                margin: 20,\r\n                width: 'fit-content',\r\n                height: 'fit-content',\r\n                padding: 20\r\n            }}\r\n        >\r\n            <Grid>\r\n                {\r\n                    changeInput\r\n                        ?\r\n                        <Grid\r\n                            container\r\n                            // direction='column'\r\n                            alignItems={'center'}\r\n                            justifyContent={'space-between'}\r\n                            style={{\r\n                                position: \"relative\",\r\n                                width: 'fit-content',\r\n                                height: 'fit-content'\r\n                            }}\r\n                        >\r\n                            <input\r\n                                className={style.customInput}\r\n                                value={title}\r\n                                onBlur={onChangeInput}\r\n                                onChange={changeTitle}\r\n                                onKeyPress={onKeyPressAddItem}\r\n                                onKeyPressCapture={(e) => setTitleKey(e.currentTarget.value)}\r\n                            />\r\n\r\n                            <Typography\r\n                                variant=\"h5\"\r\n                                component=\"div\"\r\n                                className={style.customDiv}\r\n                                style={{height: 'fit-content'}}\r\n                            >\r\n                                {getColorTitle(titleKey)}\r\n                            </Typography>\r\n                            <Button\r\n                                color={'primary'}\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    onChangeInput()\r\n                                }}>Save\r\n                            </Button>\r\n                        </Grid>\r\n                        : <Grid\r\n                            container\r\n                            direction='column'\r\n                            alignItems={'center'}\r\n                            justifyContent={'space-between'}\r\n                        >\r\n                            <Grid item\r\n                                  container\r\n                            >\r\n                                <Grid item>\r\n                                    <Typography className={style.customDiv}\r\n                                                variant=\"h5\"\r\n                                                component=\"div\"\r\n                                                onDoubleClick={onChangeSpan}\r\n                                    >{title}\r\n                                    </Typography>\r\n                                </Grid>\r\n\r\n                                <IconButton\r\n                                    color='secondary'\r\n                                    size=\"small\"\r\n                                    style={{margin: 5}}\r\n                                    onClick={() => {\r\n                                        dispatch(actionsMain.deleteMark(props.id))\r\n                                    }}><Clear/>\r\n                                </IconButton>\r\n                                <Button\r\n                                    color={'primary'}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        setChangeInput(true)\r\n                                    }}>Edit\r\n                                </Button>\r\n\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                                {props.tag.map(i => {\r\n                                    return <Chip label={i}\r\n                                                 key={nanoid()}\r\n                                                 style={{margin: 10}}\r\n                                                 onDoubleClick={() => dispatch(actionsTags.addTags([i]))}\r\n                                    />\r\n                                })}\r\n                            </Grid>\r\n                        </Grid>\r\n                }\r\n            </Grid>\r\n        </Paper>\r\n\r\n    )\r\n})\r\n","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react'\r\nimport {InputMarks} from \"../v2-inputMarks/InputMarks\";\r\nimport {Mark} from \"../v3-Mark/Mark\";\r\nimport {Button, Chip, Container, Grid, IconButton, Paper, TextField} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../App/store\";\r\nimport {actionsMain, initializeApp, MarksType} from \"../Redusers/mainReduser\";\r\nimport {nanoid} from \"nanoid\";\r\nimport {actionsTags} from \"../Redusers/tagsReduser\";\r\nimport {Clear} from \"@material-ui/icons\";\r\n\r\n\r\nfunction Main() {\r\n\r\n    const dispatch = useDispatch()\r\n    const marks = useSelector<AppRootStateType, Array<MarksType>>(state => state.main.marks);\r\n    const tags = useSelector<AppRootStateType, Array<string>>(state => state.tag.alltags);\r\n    const [currentmarks, setCurrentmarks] = useState<Array<MarksType>>(marks)\r\n    const [newTag, setNewTag] = useState<boolean>(false)\r\n    const [valueNewTag, setValueNewTag] = useState<string>('')\r\n\r\n\r\n    useEffect(() => {\r\n        setCurrentmarks(marks)\r\n        dispatch(initializeApp())\r\n    }, [marks])\r\n\r\n    const deleteTagWithMark = (t: string) => {\r\n        dispatch(actionsMain.deleteMarkTag(t))\r\n        dispatch(actionsTags.deleteTag(t))\r\n    }\r\n    const deleteTag = (t: string) => {\r\n        dispatch(actionsTags.deleteTag(t))\r\n    }\r\n\r\n    const sortMarks = (t: string) => {\r\n        let newMarks = marks.filter(m => m.tag.includes(t))\r\n        setCurrentmarks(newMarks)\r\n    }\r\n\r\n    const showAllMarks = () => {\r\n        setCurrentmarks(marks)\r\n    }\r\n\r\n    const addNewTag = () => {\r\n        dispatch(actionsTags.addTags([valueNewTag]))\r\n        setNewTag(false)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addNewTag()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Grid\r\n                direction={'column'}\r\n                container\r\n                alignItems='center'\r\n                justifyContent='space-around'\r\n\r\n            >\r\n\r\n                <Paper\r\n                    style={{\r\n                        backgroundColor: \"lightgrey\",\r\n                        padding: 10,\r\n                        margin: 20\r\n                    }}\r\n                >\r\n                    <Grid\r\n                        container\r\n                        direction={'column'}\r\n                        justifyContent={'center'}\r\n                        alignItems={'center'}\r\n                        item>\r\n                        <h1>Marks list</h1>\r\n                        <InputMarks/>\r\n\r\n                        {\r\n                            currentmarks.map(i => {\r\n                                return <Mark\r\n                                    key={nanoid()}\r\n                                    name={i.name}\r\n                                    id={i.id}\r\n                                    tag={i.tag}/>\r\n                            })\r\n                        }\r\n\r\n                        {tags.length > 0 && <Button\r\n                            onClick={showAllMarks}\r\n                            variant=\"contained\"\r\n                            size=\"medium\"\r\n                            color='primary'\r\n                        >Show all Marks</Button>}\r\n                    </Grid>\r\n                </Paper>\r\n\r\n                <Paper\r\n                    style={{\r\n                        backgroundColor: \"lightgrey\",\r\n                        padding: 10,\r\n                        margin: 20\r\n                    }}\r\n                >\r\n\r\n                    <Grid item\r\n                          container\r\n                          direction={'column'}\r\n                          justifyContent={'center'}\r\n                          alignItems={'center'}\r\n                    >\r\n                        <h2>All tags</h2>\r\n                        {\r\n                            tags.map(t => {\r\n                                return <Paper\r\n                                    key={nanoid()}\r\n                                    style={{\r\n                                        background: 'darkkhaki',\r\n                                        padding: '5px',\r\n                                        width: \"fit-content\",\r\n                                        margin: \"10px\"\r\n                                    }}\r\n                                >\r\n                                    <Grid\r\n                                        container\r\n                                        alignItems='center'\r\n                                    >\r\n                                        <Chip label={t} onClick={() => sortMarks(t)}/>\r\n                                        <IconButton\r\n                                            size=\"small\"\r\n                                            color='secondary'\r\n                                            onClick={() => deleteTag(t)}\r\n                                        ><Clear/>\r\n                                        </IconButton>\r\n                                        <Button\r\n                                            startIcon={<Clear/>}\r\n                                            onClick={() => deleteTagWithMark(t)}\r\n                                            variant=\"contained\"\r\n                                            size=\"small\"\r\n                                            color='secondary'\r\n                                        >Delete with mark\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Paper>\r\n                            })\r\n                        }\r\n\r\n                        {newTag ?\r\n                            <Paper\r\n                                style={{\r\n                                    width: 300,\r\n                                    backgroundColor: \"darkkhaki\",\r\n                                    padding: \"5px\",\r\n                                    margin: \"10px\"\r\n                                }}\r\n\r\n                            >\r\n                                <Grid item\r\n                                      container\r\n                                      alignItems={'center'}\r\n                                      justifyContent={'space-between'}\r\n                                >\r\n                                    <TextField\r\n                                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n                                            setValueNewTag(e.currentTarget.value)\r\n                                        }\r\n                                        }\r\n                                        onBlur={addNewTag}\r\n                                        onKeyPress={onKeyPressAddItem}\r\n                                        label=\"Enter tag\"\r\n                                        variant=\"outlined\"\r\n                                        style={{width: '110'}}\r\n                                        size={'small'}\r\n                                    />\r\n                                    <Button\r\n                                        onClick={() => addNewTag()}\r\n                                        color={'primary'}\r\n                                        variant=\"outlined\"\r\n                                        size=\"small\"\r\n                                    >\r\n                                        Save\r\n                                    </Button>\r\n                                </Grid>\r\n\r\n                            </Paper>\r\n                            :\r\n                            <Button\r\n                                onClick={() => setNewTag(true)}\r\n                                color={'primary'}\r\n                                variant=\"contained\"\r\n                                size=\"medium\"\r\n                                style={{margin: 10}}\r\n                            >\r\n                                Add Tag\r\n                            </Button>}\r\n                            <span>* click on the tag to sort it</span>\r\n                    </Grid>\r\n\r\n                </Paper>\r\n\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport {Switch, Route} from \"react-router-dom\";\r\nimport Main from \"../v1-Main/Main\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route exact path={\"/Mark_list\"} render={() => <Main/>}/>\r\n                <Route exact path={\"/Mark_list/main\"} render={() => <Main/>}/>\r\n                <Route path={\"*\"} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n            </Switch>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {mainReduser} from \"../Redusers/mainReduser\";\r\nimport {tagsReduser} from \"../Redusers/tagsReduser\";\r\n\r\nconst rootReducer = combineReducers({\r\n    main: mainReduser,\r\n    tag: tagsReduser\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './a1-root/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./a1-root/App/store\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}